<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="208"><g><title>perf-exec (7 samples, 3.37%)</title><rect x="0.0000%" y="805" width="3.3654%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="815.50">per..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="789" width="3.3654%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="799.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="773" width="3.3654%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="783.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="757" width="3.3654%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="7"/><text x="0.2500%" y="767.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="741" width="3.3654%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="725" width="3.3654%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="735.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="709" width="3.3654%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="7"/><text x="0.2500%" y="719.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="693" width="3.3654%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="703.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="677" width="3.3654%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="687.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="661" width="3.3654%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="7"/><text x="0.2500%" y="671.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="645" width="3.3654%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="7"/><text x="0.2500%" y="655.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="0.0000%" y="629" width="3.3654%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="7"/><text x="0.2500%" y="639.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 2.88%)</title><rect x="0.4808%" y="613" width="2.8846%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="6"/><text x="0.7308%" y="623.50">[[..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 2.88%)</title><rect x="0.4808%" y="597" width="2.8846%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="6"/><text x="0.7308%" y="607.50">[[..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 2.88%)</title><rect x="0.4808%" y="581" width="2.8846%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="6"/><text x="0.7308%" y="591.50">[[..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 2.88%)</title><rect x="0.4808%" y="565" width="2.8846%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="6"/><text x="0.7308%" y="575.50">[[..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 2.88%)</title><rect x="0.4808%" y="549" width="2.8846%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="6"/><text x="0.7308%" y="559.50">[[..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 2.88%)</title><rect x="0.4808%" y="533" width="2.8846%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="6"/><text x="0.7308%" y="543.50">[[..</text></g><g><title>[[kernel.kallsyms]] (15 samples, 7.21%)</title><rect x="3.3654%" y="789" width="7.2115%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="15"/><text x="3.6154%" y="799.50">[[kernel.k..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 6.25%)</title><rect x="4.3269%" y="773" width="6.2500%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="13"/><text x="4.5769%" y="783.50">[[kernel..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 6.25%)</title><rect x="4.3269%" y="757" width="6.2500%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="13"/><text x="4.5769%" y="767.50">[[kernel..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 6.25%)</title><rect x="4.3269%" y="741" width="6.2500%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="13"/><text x="4.5769%" y="751.50">[[kernel..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 6.25%)</title><rect x="4.3269%" y="725" width="6.2500%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="13"/><text x="4.5769%" y="735.50">[[kernel..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 6.25%)</title><rect x="4.3269%" y="709" width="6.2500%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="13"/><text x="4.5769%" y="719.50">[[kernel..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 6.25%)</title><rect x="4.3269%" y="693" width="6.2500%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="13"/><text x="4.5769%" y="703.50">[[kernel..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 6.25%)</title><rect x="4.3269%" y="677" width="6.2500%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="13"/><text x="4.5769%" y="687.50">[[kernel..</text></g><g><title>[[kernel.kallsyms]] (5 samples, 2.40%)</title><rect x="8.1731%" y="661" width="2.4038%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="5"/><text x="8.4231%" y="671.50">[[..</text></g><g><title>[[kernel.kallsyms]] (4 samples, 1.92%)</title><rect x="8.6538%" y="645" width="1.9231%" height="15" fill="rgb(238,160,17)" fg:x="18" fg:w="4"/><text x="8.9038%" y="655.50">[..</text></g><g><title>[[kernel.kallsyms]] (4 samples, 1.92%)</title><rect x="8.6538%" y="629" width="1.9231%" height="15" fill="rgb(214,148,48)" fg:x="18" fg:w="4"/><text x="8.9038%" y="639.50">[..</text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.44%)</title><rect x="9.1346%" y="613" width="1.4423%" height="15" fill="rgb(232,36,49)" fg:x="19" fg:w="3"/><text x="9.3846%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (3 samples, 1.44%)</title><rect x="9.1346%" y="597" width="1.4423%" height="15" fill="rgb(209,103,24)" fg:x="19" fg:w="3"/><text x="9.3846%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="9.6154%" y="581" width="0.9615%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="2"/><text x="9.8654%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.0962%" y="565" width="0.4808%" height="15" fill="rgb(213,181,19)" fg:x="21" fg:w="1"/><text x="10.3462%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.0962%" y="549" width="0.4808%" height="15" fill="rgb(254,191,54)" fg:x="21" fg:w="1"/><text x="10.3462%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.0962%" y="533" width="0.4808%" height="15" fill="rgb(241,83,37)" fg:x="21" fg:w="1"/><text x="10.3462%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.0962%" y="517" width="0.4808%" height="15" fill="rgb(233,36,39)" fg:x="21" fg:w="1"/><text x="10.3462%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.0962%" y="501" width="0.4808%" height="15" fill="rgb(226,3,54)" fg:x="21" fg:w="1"/><text x="10.3462%" y="511.50"></text></g><g><title>__spawni_child (1 samples, 0.48%)</title><rect x="10.5769%" y="773" width="0.4808%" height="15" fill="rgb(245,192,40)" fg:x="22" fg:w="1"/><text x="10.8269%" y="783.50"></text></g><g><title>__execvpex (1 samples, 0.48%)</title><rect x="10.5769%" y="757" width="0.4808%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="1"/><text x="10.8269%" y="767.50"></text></g><g><title>__execvpe_common (1 samples, 0.48%)</title><rect x="10.5769%" y="741" width="0.4808%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="1"/><text x="10.8269%" y="751.50"></text></g><g><title>__GI_execve (1 samples, 0.48%)</title><rect x="10.5769%" y="725" width="0.4808%" height="15" fill="rgb(231,60,39)" fg:x="22" fg:w="1"/><text x="10.8269%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="709" width="0.4808%" height="15" fill="rgb(208,69,12)" fg:x="22" fg:w="1"/><text x="10.8269%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="693" width="0.4808%" height="15" fill="rgb(235,93,37)" fg:x="22" fg:w="1"/><text x="10.8269%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="677" width="0.4808%" height="15" fill="rgb(213,116,39)" fg:x="22" fg:w="1"/><text x="10.8269%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="661" width="0.4808%" height="15" fill="rgb(222,207,29)" fg:x="22" fg:w="1"/><text x="10.8269%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="645" width="0.4808%" height="15" fill="rgb(206,96,30)" fg:x="22" fg:w="1"/><text x="10.8269%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="629" width="0.4808%" height="15" fill="rgb(218,138,4)" fg:x="22" fg:w="1"/><text x="10.8269%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="613" width="0.4808%" height="15" fill="rgb(250,191,14)" fg:x="22" fg:w="1"/><text x="10.8269%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="597" width="0.4808%" height="15" fill="rgb(239,60,40)" fg:x="22" fg:w="1"/><text x="10.8269%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="581" width="0.4808%" height="15" fill="rgb(206,27,48)" fg:x="22" fg:w="1"/><text x="10.8269%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="565" width="0.4808%" height="15" fill="rgb(225,35,8)" fg:x="22" fg:w="1"/><text x="10.8269%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="10.5769%" y="549" width="0.4808%" height="15" fill="rgb(250,213,24)" fg:x="22" fg:w="1"/><text x="10.8269%" y="559.50"></text></g><g><title>cherris_core::perft::perft (5 samples, 2.40%)</title><rect x="13.9423%" y="661" width="2.4038%" height="15" fill="rgb(247,123,22)" fg:x="29" fg:w="5"/><text x="14.1923%" y="671.50">ch..</text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 5.29%)</title><rect x="11.5385%" y="677" width="5.2885%" height="15" fill="rgb(231,138,38)" fg:x="24" fg:w="11"/><text x="11.7885%" y="687.50">&lt;cherr..</text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (1 samples, 0.48%)</title><rect x="16.3462%" y="661" width="0.4808%" height="15" fill="rgb(231,145,46)" fg:x="34" fg:w="1"/><text x="16.5962%" y="671.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (6 samples, 2.88%)</title><rect x="16.8269%" y="677" width="2.8846%" height="15" fill="rgb(251,118,11)" fg:x="35" fg:w="6"/><text x="17.0769%" y="687.50">&lt;c..</text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitAndAssign&gt;::bitand_assign (2 samples, 0.96%)</title><rect x="19.7115%" y="677" width="0.9615%" height="15" fill="rgb(217,147,25)" fg:x="41" fg:w="2"/><text x="19.9615%" y="687.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::Shl&lt;u64&gt;&gt;::shl (1 samples, 0.48%)</title><rect x="20.6731%" y="677" width="0.4808%" height="15" fill="rgb(247,81,37)" fg:x="43" fg:w="1"/><text x="20.9231%" y="687.50"></text></g><g><title>&lt;cherris_core::color::Color as core::ops::bit::Not&gt;::not (6 samples, 2.88%)</title><rect x="21.1538%" y="677" width="2.8846%" height="15" fill="rgb(209,12,38)" fg:x="44" fg:w="6"/><text x="21.4038%" y="687.50">&lt;c..</text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (16 samples, 7.69%)</title><rect x="24.0385%" y="677" width="7.6923%" height="15" fill="rgb(227,1,9)" fg:x="50" fg:w="16"/><text x="24.2885%" y="687.50">arrayvec::a..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (4 samples, 1.92%)</title><rect x="29.8077%" y="661" width="1.9231%" height="15" fill="rgb(248,47,43)" fg:x="62" fg:w="4"/><text x="30.0577%" y="671.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.48%)</title><rect x="31.2500%" y="645" width="0.4808%" height="15" fill="rgb(221,10,30)" fg:x="65" fg:w="1"/><text x="31.5000%" y="655.50"></text></g><g><title>cherris_core::attacks::queen_attacks (2 samples, 0.96%)</title><rect x="31.7308%" y="677" width="0.9615%" height="15" fill="rgb(210,229,1)" fg:x="66" fg:w="2"/><text x="31.9808%" y="687.50"></text></g><g><title>cherris_core::attacks::rook_attacks (2 samples, 0.96%)</title><rect x="31.7308%" y="661" width="0.9615%" height="15" fill="rgb(222,148,37)" fg:x="66" fg:w="2"/><text x="31.9808%" y="671.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (1 samples, 0.48%)</title><rect x="32.2115%" y="645" width="0.4808%" height="15" fill="rgb(234,67,33)" fg:x="67" fg:w="1"/><text x="32.4615%" y="655.50"></text></g><g><title>cherris_core::attacks::rook_attacks (1 samples, 0.48%)</title><rect x="32.6923%" y="677" width="0.4808%" height="15" fill="rgb(247,98,35)" fg:x="68" fg:w="1"/><text x="32.9423%" y="687.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 4.33%)</title><rect x="33.1731%" y="661" width="4.3269%" height="15" fill="rgb(247,138,52)" fg:x="69" fg:w="9"/><text x="33.4231%" y="671.50">&lt;cher..</text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (4 samples, 1.92%)</title><rect x="35.5769%" y="645" width="1.9231%" height="15" fill="rgb(213,79,30)" fg:x="74" fg:w="4"/><text x="35.8269%" y="655.50">c..</text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitOr&gt;::bitor (2 samples, 0.96%)</title><rect x="37.5000%" y="661" width="0.9615%" height="15" fill="rgb(246,177,23)" fg:x="78" fg:w="2"/><text x="37.7500%" y="671.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitOrAssign&gt;::bitor_assign (8 samples, 3.85%)</title><rect x="38.4615%" y="661" width="3.8462%" height="15" fill="rgb(230,62,27)" fg:x="80" fg:w="8"/><text x="38.7115%" y="671.50">&lt;che..</text></g><g><title>cherris_core::attacks::bishop_attacks (1 samples, 0.48%)</title><rect x="42.3077%" y="661" width="0.4808%" height="15" fill="rgb(216,154,8)" fg:x="88" fg:w="1"/><text x="42.5577%" y="671.50"></text></g><g><title>core::core_arch::x86_64::bmi2::_pext_u64 (1 samples, 0.48%)</title><rect x="42.3077%" y="645" width="0.4808%" height="15" fill="rgb(244,35,45)" fg:x="88" fg:w="1"/><text x="42.5577%" y="655.50"></text></g><g><title>cherris_core::board::Board::attacked_sqaures (23 samples, 11.06%)</title><rect x="33.1731%" y="677" width="11.0577%" height="15" fill="rgb(251,115,12)" fg:x="69" fg:w="23"/><text x="33.4231%" y="687.50">cherris_core::bo..</text></g><g><title>cherris_core::perft::perft (3 samples, 1.44%)</title><rect x="42.7885%" y="661" width="1.4423%" height="15" fill="rgb(240,54,50)" fg:x="89" fg:w="3"/><text x="43.0385%" y="671.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.48%)</title><rect x="45.6731%" y="661" width="0.4808%" height="15" fill="rgb(233,84,52)" fg:x="95" fg:w="1"/><text x="45.9231%" y="671.50"></text></g><g><title>cherris_core::board::Board::check_mask (5 samples, 2.40%)</title><rect x="44.2308%" y="677" width="2.4038%" height="15" fill="rgb(207,117,47)" fg:x="92" fg:w="5"/><text x="44.4808%" y="687.50">ch..</text></g><g><title>cherris_core::attacks::pawn_attacks (1 samples, 0.48%)</title><rect x="46.1538%" y="661" width="0.4808%" height="15" fill="rgb(249,43,39)" fg:x="96" fg:w="1"/><text x="46.4038%" y="671.50"></text></g><g><title>cherris_core::board::Board::diagonal_pinmask (1 samples, 0.48%)</title><rect x="46.6346%" y="677" width="0.4808%" height="15" fill="rgb(209,38,44)" fg:x="97" fg:w="1"/><text x="46.8846%" y="687.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitAnd&gt;::bitand (1 samples, 0.48%)</title><rect x="46.6346%" y="661" width="0.4808%" height="15" fill="rgb(236,212,23)" fg:x="97" fg:w="1"/><text x="46.8846%" y="671.50"></text></g><g><title>cherris_core::color::&lt;impl core::ops::index::Index&lt;cherris_core::color::Color&gt; for [cherris_core::bitboard::Bitboard: _]&gt;::index (1 samples, 0.48%)</title><rect x="47.1154%" y="677" width="0.4808%" height="15" fill="rgb(242,79,21)" fg:x="98" fg:w="1"/><text x="47.3654%" y="687.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 3.37%)</title><rect x="47.5962%" y="661" width="3.3654%" height="15" fill="rgb(211,96,35)" fg:x="99" fg:w="7"/><text x="47.8462%" y="671.50">&lt;ch..</text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (3 samples, 1.44%)</title><rect x="49.5192%" y="645" width="1.4423%" height="15" fill="rgb(253,215,40)" fg:x="103" fg:w="3"/><text x="49.7692%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.96%)</title><rect x="55.7692%" y="629" width="0.9615%" height="15" fill="rgb(211,81,21)" fg:x="116" fg:w="2"/><text x="56.0192%" y="639.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (21 samples, 10.10%)</title><rect x="50.9615%" y="661" width="10.0962%" height="15" fill="rgb(208,190,38)" fg:x="106" fg:w="21"/><text x="51.2115%" y="671.50">arrayvec::array..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (12 samples, 5.77%)</title><rect x="55.2885%" y="645" width="5.7692%" height="15" fill="rgb(235,213,38)" fg:x="115" fg:w="12"/><text x="55.5385%" y="655.50">arrayve..</text></g><g><title>core::ptr::write (9 samples, 4.33%)</title><rect x="56.7308%" y="629" width="4.3269%" height="15" fill="rgb(237,122,38)" fg:x="118" fg:w="9"/><text x="56.9808%" y="639.50">core:..</text></g><g><title>cherris_core::board::Board::role_on (4 samples, 1.92%)</title><rect x="61.0577%" y="661" width="1.9231%" height="15" fill="rgb(244,218,35)" fg:x="127" fg:w="4"/><text x="61.3077%" y="671.50">c..</text></g><g><title>cherris_core::move_generator::add_attacks (33 samples, 15.87%)</title><rect x="47.5962%" y="677" width="15.8654%" height="15" fill="rgb(240,68,47)" fg:x="99" fg:w="33"/><text x="47.8462%" y="687.50">cherris_core::move_gener..</text></g><g><title>cherris_core::perft::perft (1 samples, 0.48%)</title><rect x="62.9808%" y="661" width="0.4808%" height="15" fill="rgb(210,16,53)" fg:x="131" fg:w="1"/><text x="63.2308%" y="671.50"></text></g><g><title>cherris_core::perft::perft (7 samples, 3.37%)</title><rect x="63.4615%" y="677" width="3.3654%" height="15" fill="rgb(235,124,12)" fg:x="132" fg:w="7"/><text x="63.7115%" y="687.50">che..</text></g><g><title>cherris_core::move_generator::generate_moves (117 samples, 56.25%)</title><rect x="11.5385%" y="693" width="56.2500%" height="15" fill="rgb(224,169,11)" fg:x="24" fg:w="117"/><text x="11.7885%" y="703.50">cherris_core::move_generator::generate_moves</text></g><g><title>core::option::Option&lt;T&gt;::map_or (2 samples, 0.96%)</title><rect x="66.8269%" y="677" width="0.9615%" height="15" fill="rgb(250,166,2)" fg:x="139" fg:w="2"/><text x="67.0769%" y="687.50"></text></g><g><title>cherris_core::perft::perft (128 samples, 61.54%)</title><rect x="11.0577%" y="773" width="61.5385%" height="15" fill="rgb(242,216,29)" fg:x="23" fg:w="128"/><text x="11.3077%" y="783.50">cherris_core::perft::perft</text></g><g><title>cherris_core::perft::perft (128 samples, 61.54%)</title><rect x="11.0577%" y="757" width="61.5385%" height="15" fill="rgb(230,116,27)" fg:x="23" fg:w="128"/><text x="11.3077%" y="767.50">cherris_core::perft::perft</text></g><g><title>cherris_core::perft::perft (128 samples, 61.54%)</title><rect x="11.0577%" y="741" width="61.5385%" height="15" fill="rgb(228,99,48)" fg:x="23" fg:w="128"/><text x="11.3077%" y="751.50">cherris_core::perft::perft</text></g><g><title>cherris_core::perft::perft (128 samples, 61.54%)</title><rect x="11.0577%" y="725" width="61.5385%" height="15" fill="rgb(253,11,6)" fg:x="23" fg:w="128"/><text x="11.3077%" y="735.50">cherris_core::perft::perft</text></g><g><title>cherris_core::perft::perft (128 samples, 61.54%)</title><rect x="11.0577%" y="709" width="61.5385%" height="15" fill="rgb(247,143,39)" fg:x="23" fg:w="128"/><text x="11.3077%" y="719.50">cherris_core::perft::perft</text></g><g><title>cherris_core::perft::perft (10 samples, 4.81%)</title><rect x="67.7885%" y="693" width="4.8077%" height="15" fill="rgb(236,97,10)" fg:x="141" fg:w="10"/><text x="68.0385%" y="703.50">cherri..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="72.5962%" y="725" width="0.4808%" height="15" fill="rgb(233,208,19)" fg:x="151" fg:w="1"/><text x="72.8462%" y="735.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (1 samples, 0.48%)</title><rect x="72.5962%" y="709" width="0.4808%" height="15" fill="rgb(216,164,2)" fg:x="151" fg:w="1"/><text x="72.8462%" y="719.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.48%)</title><rect x="72.5962%" y="693" width="0.4808%" height="15" fill="rgb(220,129,5)" fg:x="151" fg:w="1"/><text x="72.8462%" y="703.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.48%)</title><rect x="72.5962%" y="677" width="0.4808%" height="15" fill="rgb(242,17,10)" fg:x="151" fg:w="1"/><text x="72.8462%" y="687.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.48%)</title><rect x="72.5962%" y="661" width="0.4808%" height="15" fill="rgb(242,107,0)" fg:x="151" fg:w="1"/><text x="72.8462%" y="671.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.48%)</title><rect x="72.5962%" y="645" width="0.4808%" height="15" fill="rgb(251,28,31)" fg:x="151" fg:w="1"/><text x="72.8462%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.48%)</title><rect x="72.5962%" y="629" width="0.4808%" height="15" fill="rgb(233,223,10)" fg:x="151" fg:w="1"/><text x="72.8462%" y="639.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.48%)</title><rect x="72.5962%" y="613" width="0.4808%" height="15" fill="rgb(215,21,27)" fg:x="151" fg:w="1"/><text x="72.8462%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.48%)</title><rect x="72.5962%" y="597" width="0.4808%" height="15" fill="rgb(232,23,21)" fg:x="151" fg:w="1"/><text x="72.8462%" y="607.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (1 samples, 0.48%)</title><rect x="72.5962%" y="581" width="0.4808%" height="15" fill="rgb(244,5,23)" fg:x="151" fg:w="1"/><text x="72.8462%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.48%)</title><rect x="72.5962%" y="565" width="0.4808%" height="15" fill="rgb(226,81,46)" fg:x="151" fg:w="1"/><text x="72.8462%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.48%)</title><rect x="72.5962%" y="549" width="0.4808%" height="15" fill="rgb(247,70,30)" fg:x="151" fg:w="1"/><text x="72.8462%" y="559.50"></text></g><g><title>criterion::DEFAULT_PLOTTING_BACKEND::{{closure}} (1 samples, 0.48%)</title><rect x="72.5962%" y="533" width="0.4808%" height="15" fill="rgb(212,68,19)" fg:x="151" fg:w="1"/><text x="72.8462%" y="543.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.48%)</title><rect x="72.5962%" y="517" width="0.4808%" height="15" fill="rgb(240,187,13)" fg:x="151" fg:w="1"/><text x="72.8462%" y="527.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (1 samples, 0.48%)</title><rect x="72.5962%" y="501" width="0.4808%" height="15" fill="rgb(223,113,26)" fg:x="151" fg:w="1"/><text x="72.8462%" y="511.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.48%)</title><rect x="72.5962%" y="485" width="0.4808%" height="15" fill="rgb(206,192,2)" fg:x="151" fg:w="1"/><text x="72.8462%" y="495.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.48%)</title><rect x="72.5962%" y="469" width="0.4808%" height="15" fill="rgb(241,108,4)" fg:x="151" fg:w="1"/><text x="72.8462%" y="479.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.48%)</title><rect x="72.5962%" y="453" width="0.4808%" height="15" fill="rgb(247,173,49)" fg:x="151" fg:w="1"/><text x="72.8462%" y="463.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.48%)</title><rect x="72.5962%" y="437" width="0.4808%" height="15" fill="rgb(224,114,35)" fg:x="151" fg:w="1"/><text x="72.8462%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.48%)</title><rect x="72.5962%" y="421" width="0.4808%" height="15" fill="rgb(245,159,27)" fg:x="151" fg:w="1"/><text x="72.8462%" y="431.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.48%)</title><rect x="72.5962%" y="405" width="0.4808%" height="15" fill="rgb(245,172,44)" fg:x="151" fg:w="1"/><text x="72.8462%" y="415.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.48%)</title><rect x="72.5962%" y="389" width="0.4808%" height="15" fill="rgb(236,23,11)" fg:x="151" fg:w="1"/><text x="72.8462%" y="399.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (1 samples, 0.48%)</title><rect x="72.5962%" y="373" width="0.4808%" height="15" fill="rgb(205,117,38)" fg:x="151" fg:w="1"/><text x="72.8462%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.48%)</title><rect x="72.5962%" y="357" width="0.4808%" height="15" fill="rgb(237,72,25)" fg:x="151" fg:w="1"/><text x="72.8462%" y="367.50"></text></g><g><title>criterion_plot::version (1 samples, 0.48%)</title><rect x="72.5962%" y="341" width="0.4808%" height="15" fill="rgb(244,70,9)" fg:x="151" fg:w="1"/><text x="72.8462%" y="351.50"></text></g><g><title>std::process::Command::output (1 samples, 0.48%)</title><rect x="72.5962%" y="325" width="0.4808%" height="15" fill="rgb(217,125,39)" fg:x="151" fg:w="1"/><text x="72.8462%" y="335.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::output (1 samples, 0.48%)</title><rect x="72.5962%" y="309" width="0.4808%" height="15" fill="rgb(235,36,10)" fg:x="151" fg:w="1"/><text x="72.8462%" y="319.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (1 samples, 0.48%)</title><rect x="72.5962%" y="293" width="0.4808%" height="15" fill="rgb(251,123,47)" fg:x="151" fg:w="1"/><text x="72.8462%" y="303.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::posix_spawn (1 samples, 0.48%)</title><rect x="72.5962%" y="277" width="0.4808%" height="15" fill="rgb(221,13,13)" fg:x="151" fg:w="1"/><text x="72.8462%" y="287.50"></text></g><g><title>__posix_spawnp (1 samples, 0.48%)</title><rect x="72.5962%" y="261" width="0.4808%" height="15" fill="rgb(238,131,9)" fg:x="151" fg:w="1"/><text x="72.8462%" y="271.50"></text></g><g><title>__spawni (1 samples, 0.48%)</title><rect x="72.5962%" y="245" width="0.4808%" height="15" fill="rgb(211,50,8)" fg:x="151" fg:w="1"/><text x="72.8462%" y="255.50"></text></g><g><title>__spawnix (1 samples, 0.48%)</title><rect x="72.5962%" y="229" width="0.4808%" height="15" fill="rgb(245,182,24)" fg:x="151" fg:w="1"/><text x="72.8462%" y="239.50"></text></g><g><title>__GI___wait4 (1 samples, 0.48%)</title><rect x="72.5962%" y="213" width="0.4808%" height="15" fill="rgb(242,14,37)" fg:x="151" fg:w="1"/><text x="72.8462%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="197" width="0.4808%" height="15" fill="rgb(246,228,12)" fg:x="151" fg:w="1"/><text x="72.8462%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="181" width="0.4808%" height="15" fill="rgb(213,55,15)" fg:x="151" fg:w="1"/><text x="72.8462%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="165" width="0.4808%" height="15" fill="rgb(209,9,3)" fg:x="151" fg:w="1"/><text x="72.8462%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="149" width="0.4808%" height="15" fill="rgb(230,59,30)" fg:x="151" fg:w="1"/><text x="72.8462%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="133" width="0.4808%" height="15" fill="rgb(209,121,21)" fg:x="151" fg:w="1"/><text x="72.8462%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="117" width="0.4808%" height="15" fill="rgb(220,109,13)" fg:x="151" fg:w="1"/><text x="72.8462%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="101" width="0.4808%" height="15" fill="rgb(232,18,1)" fg:x="151" fg:w="1"/><text x="72.8462%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="85" width="0.4808%" height="15" fill="rgb(215,41,42)" fg:x="151" fg:w="1"/><text x="72.8462%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="69" width="0.4808%" height="15" fill="rgb(224,123,36)" fg:x="151" fg:w="1"/><text x="72.8462%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="53" width="0.4808%" height="15" fill="rgb(240,125,3)" fg:x="151" fg:w="1"/><text x="72.8462%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="72.5962%" y="37" width="0.4808%" height="15" fill="rgb(205,98,50)" fg:x="151" fg:w="1"/><text x="72.8462%" y="47.50"></text></g><g><title>&lt;criterion::Criterion as core::default::Default&gt;::default (2 samples, 0.96%)</title><rect x="72.5962%" y="741" width="0.9615%" height="15" fill="rgb(205,185,37)" fg:x="151" fg:w="2"/><text x="72.8462%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.48%)</title><rect x="73.0769%" y="725" width="0.4808%" height="15" fill="rgb(238,207,15)" fg:x="152" fg:w="1"/><text x="73.3269%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.48%)</title><rect x="73.0769%" y="709" width="0.4808%" height="15" fill="rgb(213,199,42)" fg:x="152" fg:w="1"/><text x="73.3269%" y="719.50"></text></g><g><title>criterion::html::Html::new (1 samples, 0.48%)</title><rect x="73.0769%" y="693" width="0.4808%" height="15" fill="rgb(235,201,11)" fg:x="152" fg:w="1"/><text x="73.3269%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="677" width="0.4808%" height="15" fill="rgb(207,46,11)" fg:x="152" fg:w="1"/><text x="73.3269%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="661" width="0.4808%" height="15" fill="rgb(241,35,35)" fg:x="152" fg:w="1"/><text x="73.3269%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="645" width="0.4808%" height="15" fill="rgb(243,32,47)" fg:x="152" fg:w="1"/><text x="73.3269%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="629" width="0.4808%" height="15" fill="rgb(247,202,23)" fg:x="152" fg:w="1"/><text x="73.3269%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="613" width="0.4808%" height="15" fill="rgb(219,102,11)" fg:x="152" fg:w="1"/><text x="73.3269%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="597" width="0.4808%" height="15" fill="rgb(243,110,44)" fg:x="152" fg:w="1"/><text x="73.3269%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="581" width="0.4808%" height="15" fill="rgb(222,74,54)" fg:x="152" fg:w="1"/><text x="73.3269%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="565" width="0.4808%" height="15" fill="rgb(216,99,12)" fg:x="152" fg:w="1"/><text x="73.3269%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="549" width="0.4808%" height="15" fill="rgb(226,22,26)" fg:x="152" fg:w="1"/><text x="73.3269%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.0769%" y="533" width="0.4808%" height="15" fill="rgb(217,163,10)" fg:x="152" fg:w="1"/><text x="73.3269%" y="543.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::configure_from_args (1 samples, 0.48%)</title><rect x="73.5577%" y="741" width="0.4808%" height="15" fill="rgb(213,25,53)" fg:x="153" fg:w="1"/><text x="73.8077%" y="751.50"></text></g><g><title>clap_builder::builder::arg::Arg::help (1 samples, 0.48%)</title><rect x="73.5577%" y="725" width="0.4808%" height="15" fill="rgb(252,105,26)" fg:x="153" fg:w="1"/><text x="73.8077%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="709" width="0.4808%" height="15" fill="rgb(220,39,43)" fg:x="153" fg:w="1"/><text x="73.8077%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="693" width="0.4808%" height="15" fill="rgb(229,68,48)" fg:x="153" fg:w="1"/><text x="73.8077%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="677" width="0.4808%" height="15" fill="rgb(252,8,32)" fg:x="153" fg:w="1"/><text x="73.8077%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="661" width="0.4808%" height="15" fill="rgb(223,20,43)" fg:x="153" fg:w="1"/><text x="73.8077%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="645" width="0.4808%" height="15" fill="rgb(229,81,49)" fg:x="153" fg:w="1"/><text x="73.8077%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="629" width="0.4808%" height="15" fill="rgb(236,28,36)" fg:x="153" fg:w="1"/><text x="73.8077%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="613" width="0.4808%" height="15" fill="rgb(249,185,26)" fg:x="153" fg:w="1"/><text x="73.8077%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="597" width="0.4808%" height="15" fill="rgb(249,174,33)" fg:x="153" fg:w="1"/><text x="73.8077%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="581" width="0.4808%" height="15" fill="rgb(233,201,37)" fg:x="153" fg:w="1"/><text x="73.8077%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="73.5577%" y="565" width="0.4808%" height="15" fill="rgb(221,78,26)" fg:x="153" fg:w="1"/><text x="73.8077%" y="575.50"></text></g><g><title>cherris_core::table_gen::sliders::generate_bishop_xray_attacks (1 samples, 0.48%)</title><rect x="74.0385%" y="709" width="0.4808%" height="15" fill="rgb(250,127,30)" fg:x="154" fg:w="1"/><text x="74.2885%" y="719.50"></text></g><g><title>cherris_core::table_gen::sliders::generate_bishop_xray_attack (1 samples, 0.48%)</title><rect x="74.0385%" y="693" width="0.4808%" height="15" fill="rgb(230,49,44)" fg:x="154" fg:w="1"/><text x="74.2885%" y="703.50"></text></g><g><title>cherris_core::table_gen::rays::xray (1 samples, 0.48%)</title><rect x="74.0385%" y="677" width="0.4808%" height="15" fill="rgb(229,67,23)" fg:x="154" fg:w="1"/><text x="74.2885%" y="687.50"></text></g><g><title>cherris_core::table_gen::rays::ray (6 samples, 2.88%)</title><rect x="75.0000%" y="677" width="2.8846%" height="15" fill="rgb(249,83,47)" fg:x="156" fg:w="6"/><text x="75.2500%" y="687.50">ch..</text></g><g><title>cherris_core::table_gen::sliders::generate_rook_attacks (8 samples, 3.85%)</title><rect x="74.5192%" y="709" width="3.8462%" height="15" fill="rgb(215,43,3)" fg:x="155" fg:w="8"/><text x="74.7692%" y="719.50">cher..</text></g><g><title>cherris_core::table_gen::sliders::generate_rook_attack (8 samples, 3.85%)</title><rect x="74.5192%" y="693" width="3.8462%" height="15" fill="rgb(238,154,13)" fg:x="155" fg:w="8"/><text x="74.7692%" y="703.50">cher..</text></g><g><title>perft::main (1 samples, 0.48%)</title><rect x="77.8846%" y="677" width="0.4808%" height="15" fill="rgb(219,56,2)" fg:x="162" fg:w="1"/><text x="78.1346%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.96%)</title><rect x="78.3654%" y="693" width="0.9615%" height="15" fill="rgb(233,0,4)" fg:x="163" fg:w="2"/><text x="78.6154%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="677" width="0.9615%" height="15" fill="rgb(235,30,7)" fg:x="163" fg:w="2"/><text x="78.6154%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="661" width="0.9615%" height="15" fill="rgb(250,79,13)" fg:x="163" fg:w="2"/><text x="78.6154%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="645" width="0.9615%" height="15" fill="rgb(211,146,34)" fg:x="163" fg:w="2"/><text x="78.6154%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="629" width="0.9615%" height="15" fill="rgb(228,22,38)" fg:x="163" fg:w="2"/><text x="78.6154%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="613" width="0.9615%" height="15" fill="rgb(235,168,5)" fg:x="163" fg:w="2"/><text x="78.6154%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="597" width="0.9615%" height="15" fill="rgb(221,155,16)" fg:x="163" fg:w="2"/><text x="78.6154%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="581" width="0.9615%" height="15" fill="rgb(215,215,53)" fg:x="163" fg:w="2"/><text x="78.6154%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="565" width="0.9615%" height="15" fill="rgb(223,4,10)" fg:x="163" fg:w="2"/><text x="78.6154%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="549" width="0.9615%" height="15" fill="rgb(234,103,6)" fg:x="163" fg:w="2"/><text x="78.6154%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.96%)</title><rect x="78.3654%" y="533" width="0.9615%" height="15" fill="rgb(227,97,0)" fg:x="163" fg:w="2"/><text x="78.6154%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="78.8462%" y="517" width="0.4808%" height="15" fill="rgb(234,150,53)" fg:x="164" fg:w="1"/><text x="79.0962%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="78.8462%" y="501" width="0.4808%" height="15" fill="rgb(228,201,54)" fg:x="164" fg:w="1"/><text x="79.0962%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="78.8462%" y="485" width="0.4808%" height="15" fill="rgb(222,22,37)" fg:x="164" fg:w="1"/><text x="79.0962%" y="495.50"></text></g><g><title>cherris_core::table_gen::sliders::generate_lookup_tables (26 samples, 12.50%)</title><rect x="74.0385%" y="725" width="12.5000%" height="15" fill="rgb(237,53,32)" fg:x="154" fg:w="26"/><text x="74.2885%" y="735.50">cherris_core::table..</text></g><g><title>cherris_core::table_gen::sliders::generate_rook_xray_attacks (17 samples, 8.17%)</title><rect x="78.3654%" y="709" width="8.1731%" height="15" fill="rgb(233,25,53)" fg:x="163" fg:w="17"/><text x="78.6154%" y="719.50">cherris_cor..</text></g><g><title>cherris_core::table_gen::sliders::generate_rook_xray_attack (15 samples, 7.21%)</title><rect x="79.3269%" y="693" width="7.2115%" height="15" fill="rgb(210,40,34)" fg:x="165" fg:w="15"/><text x="79.5769%" y="703.50">cherris_co..</text></g><g><title>cherris_core::table_gen::rays::xray (15 samples, 7.21%)</title><rect x="79.3269%" y="677" width="7.2115%" height="15" fill="rgb(241,220,44)" fg:x="165" fg:w="15"/><text x="79.5769%" y="687.50">cherris_co..</text></g><g><title>cherris_core::move_generator::generate_moves (1 samples, 0.48%)</title><rect x="86.5385%" y="373" width="0.4808%" height="15" fill="rgb(235,28,35)" fg:x="180" fg:w="1"/><text x="86.7885%" y="383.50"></text></g><g><title>cherris_core::board::Board::attacked_sqaures (1 samples, 0.48%)</title><rect x="86.5385%" y="357" width="0.4808%" height="15" fill="rgb(210,56,17)" fg:x="180" fg:w="1"/><text x="86.7885%" y="367.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.48%)</title><rect x="86.5385%" y="341" width="0.4808%" height="15" fill="rgb(224,130,29)" fg:x="180" fg:w="1"/><text x="86.7885%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 1.44%)</title><rect x="87.9808%" y="357" width="1.4423%" height="15" fill="rgb(235,212,8)" fg:x="183" fg:w="3"/><text x="88.2308%" y="367.50"></text></g><g><title>cherris_core::move_generator::add_attacks (1 samples, 0.48%)</title><rect x="89.4231%" y="341" width="0.4808%" height="15" fill="rgb(223,33,50)" fg:x="186" fg:w="1"/><text x="89.6731%" y="351.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::push_unchecked (1 samples, 0.48%)</title><rect x="89.4231%" y="325" width="0.4808%" height="15" fill="rgb(219,149,13)" fg:x="186" fg:w="1"/><text x="89.6731%" y="335.50"></text></g><g><title>cherris_core::move_generator::generate_moves (2 samples, 0.96%)</title><rect x="89.4231%" y="357" width="0.9615%" height="15" fill="rgb(250,156,29)" fg:x="186" fg:w="2"/><text x="89.6731%" y="367.50"></text></g><g><title>cherris_core::perft::perft (1 samples, 0.48%)</title><rect x="89.9038%" y="341" width="0.4808%" height="15" fill="rgb(216,193,19)" fg:x="187" fg:w="1"/><text x="90.1538%" y="351.50"></text></g><g><title>&lt;cherris_core::square::Square as core::cmp::PartialEq&gt;::eq (1 samples, 0.48%)</title><rect x="91.8269%" y="341" width="0.4808%" height="15" fill="rgb(216,135,14)" fg:x="191" fg:w="1"/><text x="92.0769%" y="351.50"></text></g><g><title>cherris_core::position::Position::make_move (5 samples, 2.40%)</title><rect x="90.3846%" y="357" width="2.4038%" height="15" fill="rgb(241,47,5)" fg:x="188" fg:w="5"/><text x="90.6346%" y="367.50">ch..</text></g><g><title>cherris_core::board::Board::make_move (1 samples, 0.48%)</title><rect x="92.3077%" y="341" width="0.4808%" height="15" fill="rgb(233,42,35)" fg:x="192" fg:w="1"/><text x="92.5577%" y="351.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (1 samples, 0.48%)</title><rect x="92.3077%" y="325" width="0.4808%" height="15" fill="rgb(231,13,6)" fg:x="192" fg:w="1"/><text x="92.5577%" y="335.50"></text></g><g><title>cherris_core::perft::perft (15 samples, 7.21%)</title><rect x="87.0192%" y="373" width="7.2115%" height="15" fill="rgb(207,181,40)" fg:x="181" fg:w="15"/><text x="87.2692%" y="383.50">cherris_co..</text></g><g><title>cherris_core::position::Position::unmake_move (3 samples, 1.44%)</title><rect x="92.7885%" y="357" width="1.4423%" height="15" fill="rgb(254,173,49)" fg:x="193" fg:w="3"/><text x="93.0385%" y="367.50"></text></g><g><title>cherris_core::board::Board::unmake_move (2 samples, 0.96%)</title><rect x="93.2692%" y="341" width="0.9615%" height="15" fill="rgb(221,1,38)" fg:x="194" fg:w="2"/><text x="93.5192%" y="351.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (1 samples, 0.48%)</title><rect x="93.7500%" y="325" width="0.4808%" height="15" fill="rgb(206,124,46)" fg:x="195" fg:w="1"/><text x="94.0000%" y="335.50"></text></g><g><title>cherris_core::position::Position::make_move (1 samples, 0.48%)</title><rect x="94.2308%" y="373" width="0.4808%" height="15" fill="rgb(249,21,11)" fg:x="196" fg:w="1"/><text x="94.4808%" y="383.50"></text></g><g><title>cherris_core::board::Board::make_move (1 samples, 0.48%)</title><rect x="94.2308%" y="357" width="0.4808%" height="15" fill="rgb(222,201,40)" fg:x="196" fg:w="1"/><text x="94.4808%" y="367.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (1 samples, 0.48%)</title><rect x="94.2308%" y="341" width="0.4808%" height="15" fill="rgb(235,61,29)" fg:x="196" fg:w="1"/><text x="94.4808%" y="351.50"></text></g><g><title>[unknown] (176 samples, 84.62%)</title><rect x="10.5769%" y="789" width="84.6154%" height="15" fill="rgb(219,207,3)" fg:x="22" fg:w="176"/><text x="10.8269%" y="799.50">[unknown]</text></g><g><title>perft::main (47 samples, 22.60%)</title><rect x="72.5962%" y="773" width="22.5962%" height="15" fill="rgb(222,56,46)" fg:x="151" fg:w="47"/><text x="72.8462%" y="783.50">perft::main</text></g><g><title>perft::benches (47 samples, 22.60%)</title><rect x="72.5962%" y="757" width="22.5962%" height="15" fill="rgb(239,76,54)" fg:x="151" fg:w="47"/><text x="72.8462%" y="767.50">perft::benches</text></g><g><title>perft::perft_benchmark (44 samples, 21.15%)</title><rect x="74.0385%" y="741" width="21.1538%" height="15" fill="rgb(231,124,27)" fg:x="154" fg:w="44"/><text x="74.2885%" y="751.50">perft::perft_benchmark</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (18 samples, 8.65%)</title><rect x="86.5385%" y="725" width="8.6538%" height="15" fill="rgb(249,195,6)" fg:x="180" fg:w="18"/><text x="86.7885%" y="735.50">criterion::b..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (18 samples, 8.65%)</title><rect x="86.5385%" y="709" width="8.6538%" height="15" fill="rgb(237,174,47)" fg:x="180" fg:w="18"/><text x="86.7885%" y="719.50">criterion::b..</text></g><g><title>criterion::routine::Routine::test (18 samples, 8.65%)</title><rect x="86.5385%" y="693" width="8.6538%" height="15" fill="rgb(206,201,31)" fg:x="180" fg:w="18"/><text x="86.7885%" y="703.50">criterion::r..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (18 samples, 8.65%)</title><rect x="86.5385%" y="677" width="8.6538%" height="15" fill="rgb(231,57,52)" fg:x="180" fg:w="18"/><text x="86.7885%" y="687.50">&lt;criterion::..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 8.65%)</title><rect x="86.5385%" y="661" width="8.6538%" height="15" fill="rgb(248,177,22)" fg:x="180" fg:w="18"/><text x="86.7885%" y="671.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (18 samples, 8.65%)</title><rect x="86.5385%" y="645" width="8.6538%" height="15" fill="rgb(215,211,37)" fg:x="180" fg:w="18"/><text x="86.7885%" y="655.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 8.65%)</title><rect x="86.5385%" y="629" width="8.6538%" height="15" fill="rgb(241,128,51)" fg:x="180" fg:w="18"/><text x="86.7885%" y="639.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (18 samples, 8.65%)</title><rect x="86.5385%" y="613" width="8.6538%" height="15" fill="rgb(227,165,31)" fg:x="180" fg:w="18"/><text x="86.7885%" y="623.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 8.65%)</title><rect x="86.5385%" y="597" width="8.6538%" height="15" fill="rgb(228,167,24)" fg:x="180" fg:w="18"/><text x="86.7885%" y="607.50">&lt;alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (18 samples, 8.65%)</title><rect x="86.5385%" y="581" width="8.6538%" height="15" fill="rgb(228,143,12)" fg:x="180" fg:w="18"/><text x="86.7885%" y="591.50">alloc::vec::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18 samples, 8.65%)</title><rect x="86.5385%" y="565" width="8.6538%" height="15" fill="rgb(249,149,8)" fg:x="180" fg:w="18"/><text x="86.7885%" y="575.50">core::iter::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 8.65%)</title><rect x="86.5385%" y="549" width="8.6538%" height="15" fill="rgb(243,35,44)" fg:x="180" fg:w="18"/><text x="86.7885%" y="559.50">&lt;core::iter:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 8.65%)</title><rect x="86.5385%" y="533" width="8.6538%" height="15" fill="rgb(246,89,9)" fg:x="180" fg:w="18"/><text x="86.7885%" y="543.50">&lt;core::slice..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (18 samples, 8.65%)</title><rect x="86.5385%" y="517" width="8.6538%" height="15" fill="rgb(233,213,13)" fg:x="180" fg:w="18"/><text x="86.7885%" y="527.50">core::iter::..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (18 samples, 8.65%)</title><rect x="86.5385%" y="501" width="8.6538%" height="15" fill="rgb(233,141,41)" fg:x="180" fg:w="18"/><text x="86.7885%" y="511.50">&lt;criterion::..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (18 samples, 8.65%)</title><rect x="86.5385%" y="485" width="8.6538%" height="15" fill="rgb(239,167,4)" fg:x="180" fg:w="18"/><text x="86.7885%" y="495.50">criterion::b..</text></g><g><title>perft::perft_benchmark::{{closure}} (18 samples, 8.65%)</title><rect x="86.5385%" y="469" width="8.6538%" height="15" fill="rgb(209,217,16)" fg:x="180" fg:w="18"/><text x="86.7885%" y="479.50">perft::perft..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (18 samples, 8.65%)</title><rect x="86.5385%" y="453" width="8.6538%" height="15" fill="rgb(219,88,35)" fg:x="180" fg:w="18"/><text x="86.7885%" y="463.50">criterion::b..</text></g><g><title>perft::perft_benchmark::{{closure}}::{{closure}} (18 samples, 8.65%)</title><rect x="86.5385%" y="437" width="8.6538%" height="15" fill="rgb(220,193,23)" fg:x="180" fg:w="18"/><text x="86.7885%" y="447.50">perft::perft..</text></g><g><title>cherris_core::perft::perft (18 samples, 8.65%)</title><rect x="86.5385%" y="421" width="8.6538%" height="15" fill="rgb(230,90,52)" fg:x="180" fg:w="18"/><text x="86.7885%" y="431.50">cherris_core..</text></g><g><title>cherris_core::perft::perft (18 samples, 8.65%)</title><rect x="86.5385%" y="405" width="8.6538%" height="15" fill="rgb(252,106,19)" fg:x="180" fg:w="18"/><text x="86.7885%" y="415.50">cherris_core..</text></g><g><title>cherris_core::perft::perft (18 samples, 8.65%)</title><rect x="86.5385%" y="389" width="8.6538%" height="15" fill="rgb(206,74,20)" fg:x="180" fg:w="18"/><text x="86.7885%" y="399.50">cherris_core..</text></g><g><title>cherris_core::position::Position::unmake_move (1 samples, 0.48%)</title><rect x="94.7115%" y="373" width="0.4808%" height="15" fill="rgb(230,138,44)" fg:x="197" fg:w="1"/><text x="94.9615%" y="383.50"></text></g><g><title>cherris_core::board::Board::unmake_move (1 samples, 0.48%)</title><rect x="94.7115%" y="357" width="0.4808%" height="15" fill="rgb(235,182,43)" fg:x="197" fg:w="1"/><text x="94.9615%" y="367.50"></text></g><g><title>&lt;cherris_core::bitboard::Bitboard as core::ops::bit::BitXorAssign&gt;::bitxor_assign (1 samples, 0.48%)</title><rect x="94.7115%" y="341" width="0.4808%" height="15" fill="rgb(242,16,51)" fg:x="197" fg:w="1"/><text x="94.9615%" y="351.50"></text></g><g><title>__clone3 (7 samples, 3.37%)</title><rect x="95.1923%" y="789" width="3.3654%" height="15" fill="rgb(248,9,4)" fg:x="198" fg:w="7"/><text x="95.4423%" y="799.50">__c..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="773" width="3.3654%" height="15" fill="rgb(210,31,22)" fg:x="198" fg:w="7"/><text x="95.4423%" y="783.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="757" width="3.3654%" height="15" fill="rgb(239,54,39)" fg:x="198" fg:w="7"/><text x="95.4423%" y="767.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="741" width="3.3654%" height="15" fill="rgb(230,99,41)" fg:x="198" fg:w="7"/><text x="95.4423%" y="751.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="725" width="3.3654%" height="15" fill="rgb(253,106,12)" fg:x="198" fg:w="7"/><text x="95.4423%" y="735.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="709" width="3.3654%" height="15" fill="rgb(213,46,41)" fg:x="198" fg:w="7"/><text x="95.4423%" y="719.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="693" width="3.3654%" height="15" fill="rgb(215,133,35)" fg:x="198" fg:w="7"/><text x="95.4423%" y="703.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="677" width="3.3654%" height="15" fill="rgb(213,28,5)" fg:x="198" fg:w="7"/><text x="95.4423%" y="687.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="661" width="3.3654%" height="15" fill="rgb(215,77,49)" fg:x="198" fg:w="7"/><text x="95.4423%" y="671.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="645" width="3.3654%" height="15" fill="rgb(248,100,22)" fg:x="198" fg:w="7"/><text x="95.4423%" y="655.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="629" width="3.3654%" height="15" fill="rgb(208,67,9)" fg:x="198" fg:w="7"/><text x="95.4423%" y="639.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="613" width="3.3654%" height="15" fill="rgb(219,133,21)" fg:x="198" fg:w="7"/><text x="95.4423%" y="623.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="597" width="3.3654%" height="15" fill="rgb(246,46,29)" fg:x="198" fg:w="7"/><text x="95.4423%" y="607.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="581" width="3.3654%" height="15" fill="rgb(246,185,52)" fg:x="198" fg:w="7"/><text x="95.4423%" y="591.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="565" width="3.3654%" height="15" fill="rgb(252,136,11)" fg:x="198" fg:w="7"/><text x="95.4423%" y="575.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="549" width="3.3654%" height="15" fill="rgb(219,138,53)" fg:x="198" fg:w="7"/><text x="95.4423%" y="559.50">[[k..</text></g><g><title>[[kernel.kallsyms]] (7 samples, 3.37%)</title><rect x="95.1923%" y="533" width="3.3654%" height="15" fill="rgb(211,51,23)" fg:x="198" fg:w="7"/><text x="95.4423%" y="543.50">[[k..</text></g><g><title>__libc_start_main_impl (1 samples, 0.48%)</title><rect x="98.5577%" y="773" width="0.4808%" height="15" fill="rgb(247,221,28)" fg:x="205" fg:w="1"/><text x="98.8077%" y="783.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.48%)</title><rect x="98.5577%" y="757" width="0.4808%" height="15" fill="rgb(251,222,45)" fg:x="205" fg:w="1"/><text x="98.8077%" y="767.50"></text></g><g><title>main (1 samples, 0.48%)</title><rect x="98.5577%" y="741" width="0.4808%" height="15" fill="rgb(217,162,53)" fg:x="205" fg:w="1"/><text x="98.8077%" y="751.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.48%)</title><rect x="98.5577%" y="725" width="0.4808%" height="15" fill="rgb(229,93,14)" fg:x="205" fg:w="1"/><text x="98.8077%" y="735.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.48%)</title><rect x="98.5577%" y="709" width="0.4808%" height="15" fill="rgb(209,67,49)" fg:x="205" fg:w="1"/><text x="98.8077%" y="719.50"></text></g><g><title>std::panicking::try (1 samples, 0.48%)</title><rect x="98.5577%" y="693" width="0.4808%" height="15" fill="rgb(213,87,29)" fg:x="205" fg:w="1"/><text x="98.8077%" y="703.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.48%)</title><rect x="98.5577%" y="677" width="0.4808%" height="15" fill="rgb(205,151,52)" fg:x="205" fg:w="1"/><text x="98.8077%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.48%)</title><rect x="98.5577%" y="661" width="0.4808%" height="15" fill="rgb(253,215,39)" fg:x="205" fg:w="1"/><text x="98.8077%" y="671.50"></text></g><g><title>std::rt::cleanup (1 samples, 0.48%)</title><rect x="98.5577%" y="645" width="0.4808%" height="15" fill="rgb(221,220,41)" fg:x="205" fg:w="1"/><text x="98.8077%" y="655.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.48%)</title><rect x="98.5577%" y="629" width="0.4808%" height="15" fill="rgb(218,133,21)" fg:x="205" fg:w="1"/><text x="98.8077%" y="639.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.48%)</title><rect x="98.5577%" y="613" width="0.4808%" height="15" fill="rgb(221,193,43)" fg:x="205" fg:w="1"/><text x="98.8077%" y="623.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.48%)</title><rect x="98.5577%" y="597" width="0.4808%" height="15" fill="rgb(240,128,52)" fg:x="205" fg:w="1"/><text x="98.8077%" y="607.50"></text></g><g><title>std::rt::cleanup::{{closure}} (1 samples, 0.48%)</title><rect x="98.5577%" y="581" width="0.4808%" height="15" fill="rgb(253,114,12)" fg:x="205" fg:w="1"/><text x="98.8077%" y="591.50"></text></g><g><title>std::sys::unix::cleanup (1 samples, 0.48%)</title><rect x="98.5577%" y="565" width="0.4808%" height="15" fill="rgb(215,223,47)" fg:x="205" fg:w="1"/><text x="98.8077%" y="575.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (1 samples, 0.48%)</title><rect x="98.5577%" y="549" width="0.4808%" height="15" fill="rgb(248,225,23)" fg:x="205" fg:w="1"/><text x="98.8077%" y="559.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.48%)</title><rect x="98.5577%" y="533" width="0.4808%" height="15" fill="rgb(250,108,0)" fg:x="205" fg:w="1"/><text x="98.8077%" y="543.50"></text></g><g><title>__GI___munmap (1 samples, 0.48%)</title><rect x="98.5577%" y="517" width="0.4808%" height="15" fill="rgb(228,208,7)" fg:x="205" fg:w="1"/><text x="98.8077%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="501" width="0.4808%" height="15" fill="rgb(244,45,10)" fg:x="205" fg:w="1"/><text x="98.8077%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="485" width="0.4808%" height="15" fill="rgb(207,125,25)" fg:x="205" fg:w="1"/><text x="98.8077%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="469" width="0.4808%" height="15" fill="rgb(210,195,18)" fg:x="205" fg:w="1"/><text x="98.8077%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="453" width="0.4808%" height="15" fill="rgb(249,80,12)" fg:x="205" fg:w="1"/><text x="98.8077%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="437" width="0.4808%" height="15" fill="rgb(221,65,9)" fg:x="205" fg:w="1"/><text x="98.8077%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="421" width="0.4808%" height="15" fill="rgb(235,49,36)" fg:x="205" fg:w="1"/><text x="98.8077%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="405" width="0.4808%" height="15" fill="rgb(225,32,20)" fg:x="205" fg:w="1"/><text x="98.8077%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="389" width="0.4808%" height="15" fill="rgb(215,141,46)" fg:x="205" fg:w="1"/><text x="98.8077%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="98.5577%" y="373" width="0.4808%" height="15" fill="rgb(250,160,47)" fg:x="205" fg:w="1"/><text x="98.8077%" y="383.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.48%)</title><rect x="99.0385%" y="709" width="0.4808%" height="15" fill="rgb(216,222,40)" fg:x="206" fg:w="1"/><text x="99.2885%" y="719.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.48%)</title><rect x="99.0385%" y="693" width="0.4808%" height="15" fill="rgb(234,217,39)" fg:x="206" fg:w="1"/><text x="99.2885%" y="703.50"></text></g><g><title>openaux (1 samples, 0.48%)</title><rect x="99.0385%" y="677" width="0.4808%" height="15" fill="rgb(207,178,40)" fg:x="206" fg:w="1"/><text x="99.2885%" y="687.50"></text></g><g><title>_dl_map_object (1 samples, 0.48%)</title><rect x="99.0385%" y="661" width="0.4808%" height="15" fill="rgb(221,136,13)" fg:x="206" fg:w="1"/><text x="99.2885%" y="671.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.48%)</title><rect x="99.0385%" y="645" width="0.4808%" height="15" fill="rgb(249,199,10)" fg:x="206" fg:w="1"/><text x="99.2885%" y="655.50"></text></g><g><title>_dl_map_segments (1 samples, 0.48%)</title><rect x="99.0385%" y="629" width="0.4808%" height="15" fill="rgb(249,222,13)" fg:x="206" fg:w="1"/><text x="99.2885%" y="639.50"></text></g><g><title>memset (1 samples, 0.48%)</title><rect x="99.0385%" y="613" width="0.4808%" height="15" fill="rgb(244,185,38)" fg:x="206" fg:w="1"/><text x="99.2885%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="597" width="0.4808%" height="15" fill="rgb(236,202,9)" fg:x="206" fg:w="1"/><text x="99.2885%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="581" width="0.4808%" height="15" fill="rgb(250,229,37)" fg:x="206" fg:w="1"/><text x="99.2885%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="565" width="0.4808%" height="15" fill="rgb(206,174,23)" fg:x="206" fg:w="1"/><text x="99.2885%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="549" width="0.4808%" height="15" fill="rgb(211,33,43)" fg:x="206" fg:w="1"/><text x="99.2885%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="533" width="0.4808%" height="15" fill="rgb(245,58,50)" fg:x="206" fg:w="1"/><text x="99.2885%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="517" width="0.4808%" height="15" fill="rgb(244,68,36)" fg:x="206" fg:w="1"/><text x="99.2885%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="501" width="0.4808%" height="15" fill="rgb(232,229,15)" fg:x="206" fg:w="1"/><text x="99.2885%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="485" width="0.4808%" height="15" fill="rgb(254,30,23)" fg:x="206" fg:w="1"/><text x="99.2885%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.48%)</title><rect x="99.0385%" y="469" width="0.4808%" height="15" fill="rgb(235,160,14)" fg:x="206" fg:w="1"/><text x="99.2885%" y="479.50"></text></g><g><title>all (208 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="208"/><text x="0.2500%" y="831.50"></text></g><g><title>perft-9e8b4206d (201 samples, 96.63%)</title><rect x="3.3654%" y="805" width="96.6346%" height="15" fill="rgb(226,2,50)" fg:x="7" fg:w="201"/><text x="3.6154%" y="815.50">perft-9e8b4206d</text></g><g><title>_start (3 samples, 1.44%)</title><rect x="98.5577%" y="789" width="1.4423%" height="15" fill="rgb(234,177,6)" fg:x="205" fg:w="3"/><text x="98.8077%" y="799.50"></text></g><g><title>_dl_start (2 samples, 0.96%)</title><rect x="99.0385%" y="773" width="0.9615%" height="15" fill="rgb(217,24,9)" fg:x="206" fg:w="2"/><text x="99.2885%" y="783.50"></text></g><g><title>_dl_start_final (2 samples, 0.96%)</title><rect x="99.0385%" y="757" width="0.9615%" height="15" fill="rgb(220,13,46)" fg:x="206" fg:w="2"/><text x="99.2885%" y="767.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.96%)</title><rect x="99.0385%" y="741" width="0.9615%" height="15" fill="rgb(239,221,27)" fg:x="206" fg:w="2"/><text x="99.2885%" y="751.50"></text></g><g><title>dl_main (2 samples, 0.96%)</title><rect x="99.0385%" y="725" width="0.9615%" height="15" fill="rgb(222,198,25)" fg:x="206" fg:w="2"/><text x="99.2885%" y="735.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.48%)</title><rect x="99.5192%" y="709" width="0.4808%" height="15" fill="rgb(211,99,13)" fg:x="207" fg:w="1"/><text x="99.7692%" y="719.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.48%)</title><rect x="99.5192%" y="693" width="0.4808%" height="15" fill="rgb(232,111,31)" fg:x="207" fg:w="1"/><text x="99.7692%" y="703.50"></text></g><g><title>elf_machine_rela (1 samples, 0.48%)</title><rect x="99.5192%" y="677" width="0.4808%" height="15" fill="rgb(245,82,37)" fg:x="207" fg:w="1"/><text x="99.7692%" y="687.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.48%)</title><rect x="99.5192%" y="661" width="0.4808%" height="15" fill="rgb(227,149,46)" fg:x="207" fg:w="1"/><text x="99.7692%" y="671.50"></text></g><g><title>do_lookup_x (1 samples, 0.48%)</title><rect x="99.5192%" y="645" width="0.4808%" height="15" fill="rgb(218,36,50)" fg:x="207" fg:w="1"/><text x="99.7692%" y="655.50"></text></g><g><title>check_match (1 samples, 0.48%)</title><rect x="99.5192%" y="629" width="0.4808%" height="15" fill="rgb(226,80,48)" fg:x="207" fg:w="1"/><text x="99.7692%" y="639.50"></text></g><g><title>strcmp (1 samples, 0.48%)</title><rect x="99.5192%" y="613" width="0.4808%" height="15" fill="rgb(238,224,15)" fg:x="207" fg:w="1"/><text x="99.7692%" y="623.50"></text></g></svg></svg>